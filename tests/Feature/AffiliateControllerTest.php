<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Testing\FileFactory;
use Illuminate\Http\UploadedFile;
use Tests\TestCase;

class AffiliateControllerTest extends TestCase
{

    private FileFactory $fileFactory;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->fileFactory = new FileFactory();
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testHomeScreenExists()
    {
        $response = $this->get('/');

        $response->assertStatus(200);
        $response->assertSee('Home');
        $response->assertSee('Please attach file with affiliate locations');
        $response->assertSee('Submit');
    }

    private function sampleFileContent(): array
    {
        return array('content' => implode(PHP_EOL, array(
            json_encode(["latitude" => 52.986375, "affiliate_id" => 12, "name" =>  "Yosef Giles", "longitude" => -6.043701]),
            json_encode(["latitude" => 51.92893, "affiliate_id" => 1, "name" =>"Lance Keith", "longitude" => -10.27699]),
            json_encode(["latitude" => 51.8856167, "affiliate_id" => 2, "name" => "Mohamed Bradshaw", "longitude" => -10.4240951]),
            json_encode(["latitude" => 52.3191841, "affiliate_id" => 3, "name" => "Rudi Palmer", "longitude" => -8.5072391]),
        )),
            'passable' => array(["latitude" => 52.986375, "affiliate_id" => 12, "name" =>  "Yosef Giles", "longitude" => -6.043701])
        );
    }

    public function testCannotSubmitEmptyFile()
    {
        $emptyFile = $this->fileFactory->createWithContent('any_other_file.txt','');
        $response = $this->post('/', array(
            'affiliate_file' => $emptyFile
        ));

        $response->assertOk();
        $response->assertSee('Home');
        $response->assertSee('Something went wrong');
    }

    /**
     * Attempts to parse fake file should throw exception
     * @return void
     */
    public function testIncorrectFileResultsInSomeError()
    {
        $fakeFile = UploadedFile::fake()->create('Updated affiliates.txt', 1000, 'text/plain');
        $response = $this->post('/', array(
            'affiliate_file' => $fakeFile
        ));
        $response->assertOk();
        $response->assertSee('Home');
        $response->assertSee('Something went wrong');
    }

    public function testCorrectFileShouldShowATable()
    {
        $data = $this->sampleFileContent();
        $file = $this->fileFactory->createWithContent('any_other_file.txt', $data['content']);
        $response = $this->post('/', array(
            'affiliate_file' => $file
        ));

        $response->assertOk();
        $response->assertSee('Home');
        $response->assertSee('Affiliate Id');
        $response->assertSee('Affiliate Name');
        $response->assertSee('Latitude');
        $response->assertSee('Longitude');
        $response->assertSee('Distance from centre');
        foreach ($data['passable'] as $entries) {
            foreach ($entries as $entry) {
                $response->assertSee($entry);
            }
        }
    }

    public function testUploadedEntriesShouldBeListedInAscendingOrder()
    {

    }
}
