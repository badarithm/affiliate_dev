<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Testing\FileFactory;
use Illuminate\Http\UploadedFile;
use Tests\TestCase;

class AffiliateControllerTest extends TestCase
{

    private FileFactory $fileFactory;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->fileFactory = new FileFactory();
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testHomeScreenExists()
    {
        $response = $this->get('/');

        $response->assertStatus(200);
        $response->assertSee('Home');
        $response->assertSee('Please attach file with affiliate locations');
        $response->assertSee('Submit');
    }

    public function testCannotSubmitEmptyFile()
    {
        $emptyFile = $this->fileFactory->createWithContent('any_other_file.txt','');
        $response = $this->post('/', array(
            'affiliate_file' => $emptyFile
        ));

        $response->assertOk();
        $response->assertSee('Home');
        $response->assertSee('Something went wrong');
    }

    /**
     * Attempts to parse fake file should throw exception
     * @return void
     */
    public function testIncorrectFileResultsInSomeError()
    {
        $fakeFile = UploadedFile::fake()->create('Updated affiliates.txt', 1000, 'text/plain');
        $response = $this->post('/', array(
            'affiliate_file' => $fakeFile
        ));
        $response->assertOk();
        $response->assertSee('Home');
        $response->assertSee('Something went wrong');
    }

//    private function createFileContents(array $entries): string
//    {
//        return array('content' => implode(PHP_EOL, array(
//            json_encode(),
//            json_encode(),
//            json_encode(["latitude" => 51.8856167, "affiliate_id" => 2, "name" => "Mohamed Bradshaw", "longitude" => -10.4240951]),
//            json_encode(["latitude" => 52.3191841, "affiliate_id" => 3, "name" => "Rudi Palmer", "longitude" => -8.5072391]),
//        )),
//            'passable' => array(["latitude" => 52.986375, "affiliate_id" => 12, "name" =>  "Yosef Giles", "longitude" => -6.043701])
//        );
//    }

    private function generateFileContents(array $entries): string
    {
        return implode(PHP_EOL, array_map(function(array $entries): string {
            return json_encode($entries);
        }, $entries));
    }

    /**
     * Only the last one should be within radius
     * @return array[]
     */
    private function correctFileEntriesSample(): array
    {
        return array(
            ["latitude" => 51.92893, "affiliate_id" => 1, "name" =>"Lance Keith", "longitude" => -10.27699, 'expcected' => false],
            ["latitude" => 51.8856167, "affiliate_id" => 2, "name" => "Mohamed Bradshaw", "longitude" => -10.4240951, 'expcected' => false],
            ["latitude" => 52.3191841, "affiliate_id" => 3, "name" => "Rudi Palmer", "longitude" => -8.5072391, 'expcected' => false],
            ["latitude" => 52.986375, "affiliate_id" => 12, "name" =>  "Yosef Giles", "longitude" => -6.043701, 'expcected' => true],
        );
    }

    public function testCorrectFileShouldShowATable()
    {
        $entries = $this->correctFileEntriesSample();
        $data = $this->generateFileContents($entries);
        $file = $this->fileFactory->createWithContent('any_other_file.txt', $data);
        $response = $this->post('/', array(
            'affiliate_file' => $file
        ));

        $response->assertOk();
        $response->assertSee('Home');
        $response->assertSee('Affiliate Id');
        $response->assertSee('Affiliate Name');
        $response->assertSee('Latitude');
        $response->assertSee('Longitude');
        $response->assertSee('Distance from centre');
        foreach ($entries as $entry) {
            if ($entry['expcected']) {
                $response->assertSeeText($entry['latitude']);
                $response->assertSeeText($entry['affiliate_id']);
                $response->assertSeeText($entry['name']);
                $response->assertSeeText($entry['longitude']);
            } else {
                $response->assertDontSeeText($entry['latitude']);
//                This can coincide with some other number
//                $response->assertDontSeeText($entry['affiliate_id']);
                $response->assertDontSeeText($entry['name']);
                $response->assertDontSeeText($entry['longitude']);
            }
        }
    }

    /**
     * This is to validate that records will be ordered
     * @return array[]
     */
    private function ascendingOrderTestSample(): array
    {
        return array(
            array("latitude" => "53.2451022", "affiliate_id" => 4, "name" => "Inez Blair", "longitude" => "-6.238335"),
            array("latitude" => "53.1302756", "affiliate_id" => 5, "name" => "Sharna Marriott", "longitude" => "-6.2397222"),
            array("latitude" => "53.1229599", "affiliate_id" => 6, "name" => "Jez Greene", "longitude" =>"-6.2705202"),
            array("latitude" => "53.0033946", "affiliate_id" => 39, "name" => "Kirandeep Browning", "longitude" => "-6.3877505"),
            array("latitude" => "53.008769", "affiliate_id" => 11, "name" => "Isla-Rose Hubbard", "longitude" => "-6.1056711"),
            array("latitude" => "52.986375", "affiliate_id" => 12, "name" => "Yosef Giles", "longitude" => "-6.043701"),
            array("latitude" => "52.966", "affiliate_id" => 15, "name" => "Veronica Haines", "longitude" => "-6.463"),
        );
    }

    public function testUploadedEntriesShouldBeListedInAscendingOrder()
    {

    }
}
